Advantages of the Singleton Design Pattern
Below are the advantages of using the Singleton Design Pattern:
---------------------------------------------------------------
   + The Singleton pattern guarantees that there’s only one instance with a unique identifier, which helps prevent naming issues.
   + This pattern supports both eager initialization (creating the instance when the class is loaded) and lazy initialization (creating it when it’s first needed), providing adaptability based on the use case.
   + When implemented correctly, a Singleton can be thread-safe, ensuring that multiple threads don’t accidentally create duplicate instances.
   + By keeping just one instance, the Singleton pattern can help lower memory usage in applications where resources are limited.

Disadvantages of the Singleton Design Pattern
Here are some drawbacks of using the Singleton Design Pattern:
--------------------------------------------------------------
   - Singletons can make unit testing difficult since they introduce a global state. This can complicate testing components that depend on a Singleton, as its state can influence the test results.
   - In multi-threaded environments, the process of creating and initializing a Singleton can lead to race conditions if multiple threads try to create it simultaneously.
   - If you later find that you need multiple instances or want to modify how instances are created, it can require significant code changes.
   - The Singleton pattern creates a global dependency, which can complicate replacing the Singleton with a different implementation or using dependency injection.
   - Subclassing a Singleton can be tricky since the constructor is usually private. This requires careful handling and may not fit standard inheritance practices.